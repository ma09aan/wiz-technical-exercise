name: 02 - Build and Deploy Application to EKS

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'kubernetes/**'
      - '.github/workflows/02-app-build-deploy.yml' # Trigger on self-change too
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # Ensure PROJECT_NAME secret is set in GitHub repo settings, or hardcode here if preferred.
  # The ECR_REPOSITORY_NAME should match the name given to the aws_ecr_repository resource in Terraform.
  ECR_REPOSITORY_NAME: ${{ secrets.PROJECT_NAME }}-app-repo
  # The EKS_CLUSTER_NAME should match the name of your EKS cluster created by Terraform.
  EKS_CLUSTER_NAME: ${{ secrets.PROJECT_NAME }}-eks-cluster

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions: # Required for OIDC if you were to use it, good practice
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.get_image_tag.outputs.tag }}
      image_uri: ${{ steps.build-image.outputs.image }} # This output is used in the next job

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4 
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get Image Tag (Short SHA)
      id: get_image_tag
      run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build, tag, and push image to Amazon ECR
      id: build-image # This is the step ID
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # ECR_REPOSITORY_NAME is taken from the job's env context
        IMAGE_TAG: ${{ steps.get_image_tag.outputs.tag }}
      working-directory: ./app
      run: |
        echo "--- Debugging image URI components (build-and-push-image job) ---"
        echo "ECR_REGISTRY: '$ECR_REGISTRY'"
        echo "ECR_REPOSITORY_NAME: '$ECR_REPOSITORY_NAME'" # This uses the job-level env var
        echo "IMAGE_TAG: '$IMAGE_TAG'"
        
        if [ -z "$ECR_REGISTRY" ] || [ -z "$ECR_REPOSITORY_NAME" ] || [ -z "$IMAGE_TAG" ]; then
          echo "::error::One or more components for the image URI are empty."
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY_NAME: $ECR_REPOSITORY_NAME"
          echo "IMAGE_TAG: $IMAGE_TAG"
          exit 1
        fi

        FULL_IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG"
        echo "Constructed FULL_IMAGE_URI: '$FULL_IMAGE_URI'"

        if [ -z "$FULL_IMAGE_URI" ]; then
          echo "::error::Constructed FULL_IMAGE_URI is empty."
          exit 1
        fi
        
        echo "Building image: $FULL_IMAGE_URI"
        # Using buildx to specify platform, good for cross-architecture builds if needed
        # Ensure your EKS nodes are amd64 if you build for amd64
        docker buildx build --platform linux/amd64 -t "$FULL_IMAGE_URI" --push .
        
        # Output the full image URI for the next job
        # Set the step output using the verified variable
        echo "Setting step output 'image' to: '$TEMP_FULL_IMAGE_URI'"
        echo "image=$TEMP_FULL_IMAGE_URI" >> "$GITHUB_OUTPUT" # Quoted GITHUB_OUTPUT for safety

        echo "Pushed image: $FULL_IMAGE_URI"

    - name: Verify step output in build-and-push-image job
      if: always() # Run this step even if previous steps fail, to see the output value
      run: |
        echo "Verifying step output within 'build-and-push-image' job..."
        echo "Value of 'steps.build-image.outputs.image' is: '${{ steps.build-image.outputs.image }}'"

  deploy-to-eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push-image # Depends on the image being built and URI being outputted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      # with:
      #   version: 'v1.27.0' # Optionally specify kubectl version

    - name: Configure kubectl for EKS
      env:
        # Ensure AWS_ACCOUNT_ID is set as a GitHub secret for your repository
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
        echo "Current kubectl context:"
        kubectl config current-context
        echo "Available contexts:"
        kubectl config get-contexts

- name: Update Kubernetes deployment with new image
      env:
        # Get the ECR registry URI. This assumes the login step ID is 'login-ecr' from the first job.
        # However, we can't directly access steps from a 'needs' job this way.
        # We need to reconstruct ECR_REGISTRY or pass it as an output too.
        # For simplicity, let's reconstruct it using AWS_ACCOUNT_ID, AWS_REGION.
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} # Make sure this secret is set
        IMAGE_TAG_FROM_BUILD: ${{ needs.build-and-push-image.outputs.image_tag }}
      run: |
        echo "--- Reconstructing Image URI in deploy-to-eks job ---"
        echo "Received image_tag: '$IMAGE_TAG_FROM_BUILD'"
        echo "Using ECR_REPOSITORY_NAME (from job env): '$ECR_REPOSITORY_NAME'"
        echo "Using AWS_REGION (from job env): '$AWS_REGION'"
        echo "Using AWS_ACCOUNT_ID (from step env): '$AWS_ACCOUNT_ID'"

        if [ -z "$IMAGE_TAG_FROM_BUILD" ]; then
          echo "::error::Image tag from build step is empty."
          exit 1
        fi
        if [ -z "$ECR_REPOSITORY_NAME" ]; then
          echo "::error::ECR_REPOSITORY_NAME (job env) is empty. Check PROJECT_NAME secret."
          exit 1
        fi
        if [ -z "$AWS_REGION" ]; then
          echo "::error::AWS_REGION (job env) is empty. Check AWS_REGION secret."
          exit 1
        fi
        if [ -z "$AWS_ACCOUNT_ID" ]; then
          echo "::error::AWS_ACCOUNT_ID (step env from secret) is empty. Check AWS_ACCOUNT_ID secret."
          exit 1
        fi

        # Reconstruct the ECR Registry part
        ECR_REGISTRY_RECONSTRUCTED="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
        echo "Reconstructed ECR Registry: '$ECR_REGISTRY_RECONSTRUCTED'"

        ACTUAL_IMAGE_URI="$ECR_REGISTRY_RECONSTRUCTED/$ECR_REPOSITORY_NAME:$IMAGE_TAG_FROM_BUILD"
        echo "Reconstructed ACTUAL_IMAGE_URI: '$ACTUAL_IMAGE_URI'"

        if [ -z "$ACTUAL_IMAGE_URI" ]; then
          echo "::error::Reconstructed ACTUAL_IMAGE_URI is empty. Cannot update deployment."
          exit 1
        fi
        
        DEPLOYMENT_FILE="kubernetes/03-deployment.yaml"
        PLACEHOLDER_TEXT="image: DYNAMICALLY_REPLACED_BY_CI_CD_PIPELINE"

        echo "Updating $DEPLOYMENT_FILE..."
        if grep -q "$PLACEHOLDER_TEXT" "$DEPLOYMENT_FILE"; then
          sed -i "s#${PLACEHOLDER_TEXT}.*#image: ${ACTUAL_IMAGE_URI}#g" "$DEPLOYMENT_FILE"
          echo "$DEPLOYMENT_FILE after sed replacement:"
          cat "$DEPLOYMENT_FILE"
          if grep -q "$PLACEHOLDER_TEXT" "$DEPLOYMENT_FILE"; then
            echo "::error::Placeholder text still found after sed. Replacement failed."
            exit 1
          elif ! grep -q "image: ${ACTUAL_IMAGE_URI}" "$DEPLOYMENT_FILE"; then
            echo "::error::New image URI not found after sed. Replacement failed. URI: '${ACTUAL_IMAGE_URI}'"
            exit 1
          else
            echo "Image URI successfully updated in $DEPLOYMENT_FILE."
          fi
        else
          echo "::warning::Placeholder text '$PLACEHOLDER_TEXT' not found in $DEPLOYMENT_FILE."
        fi

    - name: Deploy to EKS cluster
      run: |
        echo "Applying Kubernetes manifests..."
        kubectl apply -f kubernetes/01-namespace.yaml
        # Ensure the secret data is correctly base64 encoded and the placeholder is replaced before applying
        kubectl apply -f kubernetes/05-secret.yaml 
        kubectl apply -f kubernetes/02-rbac-clusteradmin.yaml
        kubectl apply -f kubernetes/03-deployment.yaml
        kubectl apply -f kubernetes/04-service.yaml
        
        echo "Waiting for deployment rollout to complete..."
        kubectl rollout status deployment/wizapp-deployment -n wizapp --timeout=3m
        
        echo "Application Load Balancer URL (may take a few minutes to become available):"
        # Attempt to get hostname, fall back to IP if hostname is not available
        LB_ADDRESS=$(kubectl get svc wizapp-service -n wizapp -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || kubectl get svc wizapp-service -n wizapp -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Load Balancer Address: $LB_ADDRESS"
        if [ -z "$LB_ADDRESS" ]; then
          echo "::warning::Load Balancer address not yet available."
        fi